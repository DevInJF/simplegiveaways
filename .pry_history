continue
run
end
done
pry.run
pry
request
resume
pry.resume
exit
request
request.env
request
exit
request
exit
@request
@blotter
@blotter.request
@blotter.env
@blotter.value
request
request.params
{"signed_request"=>
  "69YF0iDj2R0lRBFILBxQGnGZX6zLkjgcpEETjwBgLuA.eyJhbGdvcml0aG0iOiJITUFDLVNIQTI1NiIsImV4cGlyZXMiOjEzNTA4ODIwMDAsImlzc3VlZF9hdCI6MTM1MDg3NTY0MSwib2F1dGhfdG9rZW4iOiJBQUFHSTBiY0Z1MFVCQVA3c1VIRHFNWDAwTzBDaGFGaHJtbnFxR05OUVpDV29pZVNFOTJKanIweVI3RHNOUFpBZFduWkNscWQ2Z1ZXUExqRTNSTFpCd0xKWkJ4WkIxVUxVeHR6eXF5V3R5OUxBWkRaRCIsInVzZXIiOnsiY291bnRyeSI6InVzIiwibG9jYWxlIjoiZW5fVVMiLCJhZ2UiOnsibWluIjoyMX19LCJ1c2VyX2lkIjoiODA4MjgzIn0",
  "fb_source"=>"search",
  "ref"=>"ts",
  "fref"=>"ts",
  "controller"=>"blotter",
"action"=>"index"}
request.cookies
request.uri
request.referrer
request.keys
request.as_json
request.as_json.keys
request.as_json.method
request.method
request.fullpath
request.referrer
request.ip
request.browser
request.session
session
session.inspect
session[:id] = 3
session
request.keys
request.as_json.keys
request.as_json.values
request.request_id
request.id
request.rack
request.filtered_params
request.as_json.keys
request.filtered_parameters
request.env.rack
request.env
request.env["rack"
]
request.env["HTTP_ORIGIN"]
request.session
params
cookies
session
request.as_json
JSON.parse(_)
request.as_json(true)
JSON.parse(_)
JSON.parse(request.to_json)
JSON.parse(request.as_json)
request.as_json.attributes
request.as_json.keys
OpenStruct.new(request.as_json)
x = _
x.method
JSON.parse(x)
x
x.to_yaml
x.to_json
x
x.keys
x
x.fullpath
request
request.to_yaml
require 'yajl
'
request.to_xml
request.to_hash
request.to_json
request.as_json
request.as_json.keys
request.to_yaml
ActionController::TestRequest.new()
exit
@blotter
@blotter.instance_eval{payload}
exit
@blotter
@blotter.payload
reload!
@blotter.payload
exit
@blotter.payload
exit
@blotter.payload
@blotter.params
@blotter.request
@blotter.instance_eval{@request.params}
@blotter.payload.has_key? 'user_id'
exit
@blotter.visitor
@blotter
@blotter.payload
@blotter.page
@blotter.payload['page']
@blotter.payload['user']
@blotter.payload['user_id']
exit
@blotter.visitor
@blotter.payload
@blotter.payload['user_id']
@blotter.payload['user']
@x = @blotter.payload['user']
@x.merge!('user_id' => @blotter.payload['user_id'])
@blotter.payload
@blotter.payload.has_key? 'user_id'
exit
@blotter
@blotter.visitor
exit
request.source
request.referrer
request.referrer_host
request.referring_host
request.host
request
request.env
request.env.keys
request.origin
request.keys
request.to_json.keys
request.env
request.ack
ack
require 'ack'
grep
request.grep('facebook')
request.to_s
request.as_json.stringify
request.as_json.stringify_keys
request.as_json.stringify_keys.grep("facebook")
request.as_json.stringify_keys.values
request.as_json.stringify_keys.values.join
request.as_json.stringify_keys.values.join.grep("facebook")
grep("facebook", request.as_json.stringify_keys.values.join)
exit
@blotter
@blotter.visitor
@blotter.page
exit
caller
cd ../
cd /
caller
caller[0]
caller[0][/`([^']*)'/, 1]
exit
@x
exit
caller
caller(blotter_art_model)
exit
@blotter.page
@blotter.class.blotter_model
@blotter.class.blotter_art_model
@blotter.page
FacebookPage
FacebookPage.all
FacebookPage.find({"id"=>"152206671558551"})
{"id"=>"152206671558551"}.to_hash
{"id"=>"152206671558551"}.symbolize_keys
FacebookPage.find({"id"=>"152206671558551"}.symbolize_keys)
FacebookPage.find("152206671558551")
exit
@blotter
@blotter.page
exit
@blotter
@blotter.page
@blotter.instance_eval{likely_pid_columns}
@blotter.instance_eval{blotter_model_columns}
@blotter.instance_eval{blotter_model.columns}
@blotter.instance_eval{blotter_model.columns.select do |column|}
[:string, :integer,:text].include? column.type
column =~ common_pid_column_names
end
@blotter.instance_eval{blotter_model_columns}
@blotter.instance_eval{likely_pid_columns}
@blotter.instance_eval{likely_pid_columns}exit
exit
@blotter.instance_eval{likely_pid_columns}
@blotter.instance_eval{blotter_model.columns.select do |column|
    [:string, :integer,:text].include? column.type and column =~ common_pid_column_names
end}
@blotter.instance_eval{blotter_model.columns.select do |column|
    [:string, :integer,:text].include? column.type
end}
exit
@blotter.page
exit
@blotter.page
exit
@blotter.page
exit
@blotter.page
exit
@blotter.page
exit
@blotter.page
@blotter.view
exit
@blotter.page
@blotter.view
@blotter.page.active_giveaway
@blotter.page.giveaways
exit
@blotter.page
@blotter.view
@blotter.visitor
@blotter.referral_type
@blotter.payload
exit
@blotter
request
request.params
request.url
@blotter.request
@blotter.view
@blotter.page
@blotter.payload
@blotter.referral_type
exit
@blotter.referral_type
@blotter.page
@blotter.view
@blotter.params
@blotter.request.params
@blotter.cookie
@blotter.cookies
@blotter.inbound_cookie
@blotter.visitor
exit
@blotter.visitor
@blotter.page
@blotter.pid
@blotter.referral_type
@blotter.payload
@blotter.request
@request = @blotter.instance_eval { @request }
@request.params
Blotter.app_id
@blotter.app_id
@blotter.instance_eval { Blotter.app_id }
FB_APP_ID
Blotter.register_app_id FB_APP_ID
Blotter.app_id
exit
@blotter.visitor
@blotter.inbound_cookie
@blotter.visitor
@blotter.page
@blotter.view
@blotter.pid
@blotter.referral_type
@blotter.payload
@blotter.visitor
@options
@blotter.instance_eval{@request.cookies}
@blotter.instance_eval{@request.cookies.signed[cookie_key]}
exit
@blotter.visitor
@blotter.instance_eval{@request.cookies}
@blotter.instance_eval{@request.cookies.signed[cookie_key]}
@blotter.instance_eval{@request.cookies[cookie_key]}
exit
@blotter.visitor
Blotter.app_id
exit
@blotter.visitor
exit
@blotter.visitor
@blotter.visitor.outbound_cookie
@blotter.outbound_cookie
@blotter.inbound_cookie
@blotter.cookie
@blotter.instance_eval { cookie }
@blotter.instance_eval { cookie.outbound }
@blotter.inbound_cookie
@blotter.outbound_cookie
@blotter.visitor
exit
@blotter.visitor
@blotter.instance_eval{@request.cookies}
@blotter.instance_eval{@request.cookies.signed}
@blotter.instance_eval{@request.cookies.signed['this']}
exit
@blotter.inbound_cookie
@blotter.visitor
request
request.cookies
request.cookies.signed
request.cookies.signed["fbsr_431909276859205"]
request
cookies
cookies.signed
cookies
request.cookies
ActionController::CookieJar.new(request.cookies)
CookieJar
ActionDispath
ActionDispatch
ActionDispatch::CookieJar
ActionDispatch::Cookies::CookieJar.new(request.cookies)
ActionDispatch::Cookies::CookieJar.new(request)
@c = ActionDispatch::Cookies::CookieJar.new(request)
@c.signed
@c.signed['hi']
@c = ActionDispatch::Cookies::CookieJar.new(request.cookies)
@c.signed
ActionDispatch::Cookies::CookieJar.build(request)
@c = ActionDispatch::Cookies::CookieJar.build(request)
@c.signed
@c = ActionDispatch::Cookies::CookieJar.build(request)exit
exit
@blotter.visitor
@blotter.inbound_cookie
@blotter.referral_type
exit
@blotter.visitor
@blotter.inbound_cookie
@blotter.outbound_cookie
exit
@blotter.outbound_cookie
exit
@blotter.outbound_cookie
exit
@blotter.outbound_cookie
exit
@blotter.outbound_cookie
exit
@blotter.outbound_cookie
exit
@blotter.outbound_cookie
exit
@blotter.outbound_cookie
exit
@blotter.page
continue
next
c
exit
@blotter.visitor
continue
eit
exit
